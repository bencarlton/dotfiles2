#!/usr/bin/env bash

# Install rip2: A safe and ergonomic alternative to rm
# https://github.com/MilesCranmer/rip2

{{ template "shared_script_utils.bash" . }}

_hasJQ_ # Confirm we have jq installed

VERBOSE=false
PACKAGE_NAME="rip"
REPOSITORY="MilesCranmer/rip2"

header "Verify ${PACKAGE_NAME} installation and check for updates"

# Fetch the API response once and store it in a variable
API_RESPONSE=$(curl -s "https://api.github.com/repos/${REPOSITORY}/releases/latest")

# Extract the required information from the stored API response
LATEST_VERSION=$(echo "${API_RESPONSE}" | jq -r .tag_name | sed 's/v//g')
IS_PRE_RELEASE=$(echo "${API_RESPONSE}" | jq -r .prerelease)
IS_DRAFT=$(echo "${API_RESPONSE}" | jq -r .draft)
RELEASE_NOTES=$(echo "${API_RESPONSE}" | jq -r .html_url)

info "Latest version is ${LATEST_VERSION}"
debug "Is pre-release: ${IS_PRE_RELEASE}"
debug "Is draft: ${IS_DRAFT}"
debug "Release Notes: ${RELEASE_NOTES}"

if [[ $(command -v ${PACKAGE_NAME}) ]]; then
    CURRENT_VERSION=$(${PACKAGE_NAME} --version | awk '{print $2}')

    info "Local version: ${CURRENT_VERSION}"

    if [[ ${CURRENT_VERSION} == "${LATEST_VERSION}" ]]; then
        success "${PACKAGE_NAME} is already up to date"
        _safeExit_ 0
    fi

    if [[ ${IS_PRE_RELEASE} == "true" ]] || [[ ${IS_DRAFT} == "true" ]]; then
        notice "Latest version is a pre-release or draft. Skipping update."
        _safeExit_ 0
    fi
fi

case "{{ .chezmoi.os }}" in
    "darwin")
        OS="macOS-Darwin"
        LIBC_VARIANT=""
        ;;
    "linux")
        OS="Linux"
        LIBC_VARIANT="-musl"
        ;;
    *)
        warning "Unsupported OS: ${OS}"
        _safeExit_
        ;;
esac

case "{{ .chezmoi.arch }}" in
    "amd64")
        ARCH="x86_64"
        ;;
    "arm64")
        ARCH="aarch64"
        ;;
    *)
        warning "Unsupported architecture: ${ARCH}"
        _safeExit_
        ;;
esac

ASSET="rip-${OS}-${ARCH}${LIBC_VARIANT}.tar.gz"
DOWNLOAD_URL="https://github.com/MilesCranmer/rip2/releases/download/v${LATEST_VERSION}/${ASSET}"

_makeTempDir_ "$(basename "$0")"
pushd "${TMP_DIR}" &>/dev/null || exit

info "Downloading ${PACKAGE_NAME} version ${LATEST_VERSION}"


# Download the binary
curl -Lo binary.tar.gz "${DOWNLOAD_URL}"

# Extract the binary
tar xf binary.tar.gz ${PACKAGE_NAME}

# Move the binary to the local bin directory
if [[ -d "${HOME}/.local/bin" ]]; then
    mv ${PACKAGE_NAME} "${HOME}/.local/bin"
else
    mkdir -p "${HOME}/.local/bin"
    mv ${PACKAGE_NAME} "${HOME}/.local/bin"
fi

success "${PACKAGE_NAME} v${LATEST_VERSION} installed to ${HOME}/.local/bin/${PACKAGE_NAME}"
info "Release notes: ${RELEASE_NOTES}"

popd &>/dev/null || exit
_safeExit_
